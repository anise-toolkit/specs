/*
    ANISE
    Copyright (C) 2021 Christopher Rabotin <christopher.rabotin@gmail.com> et al. (cf. AUTHORS.md)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

namespace Anise.Common;

struct Vector3 {
    x: double;
    y: double;
    z: double;
}

// A quaternion is stored as its 3-component unit vector first (each component as a 32-bit float) and its half-angle (w) as a 64-bit float.
// As a unit vector, a 32-bit float should be (is?) sufficient to store a precise quaternion while saving space.
struct Quaternion {
    x: float;
    y: float;
    z: float;
    w: double;
}

table Constant {
    value:double;
    unit:string;
    comment:string;
}

table ConstantMap {
    keys:[string];
    values:[Constant];
}

enum InterpolationKind:ubyte {
    ChebyshevSeries = 0,
    HermiteSeries = 1,
    LagrangeSeries = 2,
    Polynomial = 3,
    Trigonometric = 4, // Sometimes called Fourier Series interpolation
}